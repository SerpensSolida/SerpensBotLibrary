<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>SerpensBot - Admin panel</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js" type="text/javascript"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/css/bootstrap.min.css" rel="stylesheet"
          integrity="sha384-gH2yIJqKdNHPEq0n4Mqa/HGKIhSkIHeL5AyhkYV8i59U5AR6csBvApHHNl/vI1Bx" crossorigin="anonymous">

    <script>
        let logUpdateTimeout;
        let lastLogUpdate = null;

        async function checkBotStatus(showToast)
        {
            try
            {
                const response = await fetch("/status");

                switch (response.status)
                {
                    case 200:
                        console.log("Token has been authorized.");
                        break;

                    case 401:
                    case 403:
                        window.location.replace("/");
                        console.log("Token missing or refused.");
                        return;

                    default:
                        console.log("Request failed with status code: " + response.status);
                        return;
                }

                const data = await response.json();
                manageBotStatus(data.status, showToast);
            }
            catch (error)
            {
                console.log(error);
            }
        }

        function manageBotStatus(botStatus, showToast)
        {
            const restartButton = document.getElementById("restart-button");
            const restartButtonLabel = document.getElementById("restart-button-label");
            const stopButton = document.getElementById("kill-button");

            const toastLiveExample = document.getElementById('liveToast');
            const toast = new bootstrap.Toast(toastLiveExample);
            const toastText = document.getElementById("toast-label");

            switch (botStatus)
            {
                case "CONNECTED":
                    stopButton.removeAttribute("disabled");

                    restartButton.className = "btn btn-warning";
                    restartButtonLabel.textContent = "Restart Bot";

                    //Display toast message;
                    if (!showToast)
                        break;

                    //Display toast message.
                    toastText.textContent = "SerpensBot is online.";
                    toast.show()
                    break;

                case "SHUTDOWN":
                    stopButton.setAttribute("disabled", "");

                    restartButton.className = "btn btn-success";
                    restartButtonLabel.textContent = "Start Bot";

                    //Display toast message;
                    if (!showToast)
                        break;

                    toastText.textContent = "SerpensBot is offline.";
                    toast.show()
                    break;

                default:
                    //TODO: bot state unknown.
            }
        }

        async function restartBot()
        {
            try
            {
                //Display spinner
                const spinner = $("#restart-spinner");
                spinner.show();

                const restartButton = $("#restart-button");
                restartButton.attr("disabled", "");

                const request =
                {
                    method: 'POST',
                    headers:
                    {
                        'Content-type': 'application/json; charset=UTF-8'
                    }
                };

                const response = await fetch("/restart", request);

                switch (response.status)
                {
                    case 200:
                        console.log("Token has been authorized.");
                        break;

                    case 401:
                    case 403:
                        window.location.replace("/");
                        console.log("Token missing or refused.");
                        return;

                    default:
                        console.log("Request failed with status code: " + response.status);
                        return;
                }

                spinner.hide();
                restartButton.removeAttr("disabled");

                const data = await response.json();
                console.log(data);
                await checkBotStatus(true);

            }
            catch (error)
            {
                console.log(error);
            }
        }

        async function stopBot()
        {
            try
            {
                //Display spinner
                const spinner = $("#kill-spinner");
                spinner.show();

                const request =
                {
                    method: 'POST',
                    headers:
                    {
                        'Content-type': 'application/json; charset=UTF-8'
                    }
                };

                const response = await fetch("/stop", request);

                switch (response.status)
                {
                    case 200:
                        break;

                    case 401:
                    case 403:
                        window.location.replace("/");
                        console.log("Token missing or refused.");
                        return;

                    default:
                        console.log("Request failed with status code: " + response.status);
                        return;
                }

                spinner.hide();

                const data = await response.json();
                console.log(data);
                await checkBotStatus(true);
            }
            catch (error)
            {
                console.log(error);
            }
        }

        async function updateLog()
        {
			try
            {
                const response = await fetch("/log" + (lastLogUpdate !== null ? ("?lastUpdate=" + lastLogUpdate) : ""));

                switch (response.status)
                {
                    case 200:
                        console.log("Token has been authorized.");
                        break;

                    case 401:
                    case 403:
                        window.location.replace("/");
                        console.log("Token missing or refused.");
                        return;

                    default:
                        console.log("Request failed with status code: " + response.status);
                        return;
                }

                const data = await response.json();
                lastLogUpdate = data.updateDate;
                appendLog(data);

                startLogAutoUpdate();
            }
            catch (error)
            {
                console.log(error);
            }
        }

        function appendLog(data)
        {
            const logArea = $("#log-area");
			let logString = logArea.val();

            data.lines.forEach(line => logString += line + "\n");
            logArea.val(logString);
            logArea.scrollTop(logArea[0].scrollHeight - 20);
        }

        function startLogAutoUpdate()
        {
            logUpdateTimeout = setTimeout(() => updateLog(), 5000);
        }

        function stopLogAutoUpdate()
        {
            logUpdateTimeout.stop();
        }

    </script>
</head>
<body onload="checkBotStatus(false); startLogAutoUpdate();" class="text-bg-dark bg-dark">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.0/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-A3rJD856KowSb7dwlZdYEkO39Gagi7vIsF0jrRAoQmDKKtQBHUuLZ9AsSv4jD4Xa"
        crossorigin="anonymous"></script>

    <div class="container mt-5">
        <div class="row align-items-center">
            <div class="col">
                <div class="container d-flex">
                    <div class="card bg-white text-bg-dark bg-opacity-10" style="width: 18rem;">
                        <div class="card-body">
                            <h5 class="card-title">SerpensBot</h5>
                            <h6 class="card-subtitle mb-2 text-muted">Controls</h6>
                            <div class="grid">
                                <div class="row m-2">
                                    <button id="kill-button" class="btn btn-danger" type="button" value="Stop Bot" onclick="stopBot()">
                                        <span id="kill-spinner" class="spinner-border spinner-border-sm" role="status" aria-hidden="true" style="display:none"></span>
                                        <span class="sr-only">Stop Bot</span>
                                    </button>
                                </div>
                                <div class="row m-2">
                                    <button id="restart-button" class="btn btn-danger" type="button" value="Stop Bot" onclick="restartBot()">
                                        <span id="restart-spinner" class="spinner-border spinner-border-sm" role="status" aria-hidden="true" style="display:none"></span>
                                        <span id="restart-button-label" class="sr-only">Restart Bot</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col">
            </div>
            <div class="col">
            </div>
        </div>
        <div class="row align-items-center mt-5">
            <div class="col">
                <div class="accordion" id="log-accordion">
                    <div class="accordion-item bg-white bg-opacity-10 border-0">
                        <h2 class="accordion-header" id="headingOne">
                            <button class="accordion-button bg-white bg-opacity-10 text-bg-dark" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                                SerpensBot Log
                            </button>
                        </h2>
                        <div id="collapseOne" class="accordion-collapse collapse" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
                            <div class="accordion-body bg-white bg-opacity-25">
                                <label for="log-area"></label>
                                <textarea id="log-area" class="bg-dark font-monospace" wrap="off" rows="10" cols="5000" style="box-sizing:border-box; width:100%; padding: 5px;" disabled></textarea>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div id="liveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header bg-dark text-bg-dark" style="--bs-bg-opacity: .9;">
##                <img src="..." class="rounded me-2" alt="...">
                <strong class="me-auto">SerpensBot</strong>
##                <small>11 mins ago</small>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body bg-dark text-bg-dark bg-opacity-75" id="toast-label">
                Message
            </div>
        </div>
    </div>

</body>
</html>
